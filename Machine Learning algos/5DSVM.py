from sklearn import svm
import numpy as np
from sklearn.model_selection import LeaveOneOut
from sklearn import preprocessing


#datasets
cardboardPlastic =[[3.330e+07, 8.910e+07, 1.845e+08, 2.943e+08, 1.755e+08],
[2.520e+07, 8.100e+07, 2.007e+08, 2.745e+08, 1.008e+08],
[2.340e+07, 1.296e+08, 2.196e+08, 1.224e+08, 3.960e+07],
[2.520e+07, 7.380e+07, 6.750e+07, 1.017e+08, 1.188e+08],
[3.690e+07, 5.580e+07, 8.640e+07, 9.900e+06, 1.449e+08],
[2.880e+07, 5.580e+07, 1.215e+08, 1.602e+08, 1.575e+08],
[3.420e+07, 1.386e+08, 2.277e+08, 1.143e+08, 1.458e+08],
[3.690e+07, 9.900e+07, 2.862e+08, 2.457e+08, 1.611e+08],
[2.520e+07, 4.950e+07, 1.224e+08, 2.313e+08, 4.860e+07],
[3.420e+07, 8.550e+07, 6.840e+07, 2.709e+08, 1.485e+08],
[2.160e+07, 5.400e+07, 1.215e+08, 2.448e+08, 1.845e+08],
[4.680e+07, 1.521e+08, 2.907e+08, 2.997e+08, 2.502e+08],
[7.470e+07, 2.475e+08, 3.555e+08, 2.889e+08, 3.861e+08],
[6.840e+07, 5.760e+07, 4.320e+07, 0.000e+00, 3.465e+08],
[ 5.670e+07,  1.908e+08,  4.482e+08,  3.483e+08, -8.190e+07],
[5.670e+07, 1.071e+08, 1.170e+08, 5.940e+07, 2.619e+08],
[4.770e+07, 1.017e+08, 1.503e+08, 1.494e+08, 1.953e+08],
[8.820e+07, 2.736e+08, 4.536e+08, 5.427e+08, 3.753e+08],
[1.314e+08, 3.285e+08, 4.473e+08, 4.212e+08, 8.640e+08],
[6.300e+07, 1.818e+08, 2.367e+08, 3.384e+08, 3.312e+08]]

cardboardWood =[[3.330e+07, 8.910e+07, 1.845e+08, 2.943e+08, 1.755e+08],
[2.520e+07, 8.100e+07, 2.007e+08, 2.745e+08, 1.008e+08],
[2.340e+07, 1.296e+08, 2.196e+08, 1.224e+08, 3.960e+07],
[2.520e+07, 7.380e+07, 6.750e+07, 1.017e+08, 1.188e+08],
[3.690e+07, 5.580e+07, 8.640e+07, 9.900e+06, 1.449e+08],
[2.880e+07, 5.580e+07, 1.215e+08, 1.602e+08, 1.575e+08],
[3.420e+07, 1.386e+08, 2.277e+08, 1.143e+08, 1.458e+08],
[3.690e+07, 9.900e+07, 2.862e+08, 2.457e+08, 1.611e+08],
[2.520e+07, 4.950e+07, 1.224e+08, 2.313e+08, 4.860e+07],
[3.420e+07, 8.550e+07, 6.840e+07, 2.709e+08, 1.485e+08],
[6.300e+07, 6.750e+07, 5.850e+07, 6.480e+07, 1.962e+08],
[4.500e+07, 5.580e+07, 8.010e+07, 1.098e+08, 1.134e+08],
[1.152e+08, 2.331e+08, 3.519e+08, 3.933e+08, 4.851e+08],
[ 1.071e+08,  2.619e+08,  3.870e+08,  4.815e+08, -2.664e+08],
[1.422e+08, 2.880e+08, 4.635e+08, 5.823e+08, 7.920e+08],
[9.810e+07, 2.304e+08, 2.061e+08, 1.098e+08, 3.474e+08],
[ 5.31e+07, 3.69e+07,  8.73e+07,  3.33e+08, -9.72e+07],
[ 1.125e+08,  1.386e+08,  2.142e+08,  2.349e+08, -1.818e+08],
[4.410e+07, 5.310e+07, 5.310e+07, 1.260e+07, 1.107e+08],
[45000000., 70200000., 95400000., 80100000., 84600000.]]

woodPlastic = [[6.300e+07, 6.750e+07, 5.850e+07, 6.480e+07, 1.962e+08],
[4.500e+07, 5.580e+07, 8.010e+07, 1.098e+08, 1.134e+08],
[1.152e+08, 2.331e+08, 3.519e+08, 3.933e+08, 4.851e+08],
[ 1.071e+08,  2.619e+08,  3.870e+08,  4.815e+08, -2.664e+08],
[1.422e+08, 2.880e+08, 4.635e+08, 5.823e+08, 7.920e+08],
[9.810e+07, 2.304e+08, 2.061e+08, 1.098e+08, 3.474e+08],
[ 5.31e+07, 3.69e+07,  8.73e+07,  3.33e+08, -9.72e+07],
[ 1.125e+08,  1.386e+08,  2.142e+08,  2.349e+08, -1.818e+08],
[4.410e+07, 5.310e+07, 5.310e+07, 1.260e+07, 1.107e+08],
[45000000., 70200000., 95400000., 80100000., 84600000.],
[2.160e+07, 5.400e+07, 1.215e+08, 2.448e+08, 1.845e+08],
[4.680e+07, 1.521e+08, 2.907e+08, 2.997e+08, 2.502e+08],
[7.470e+07, 2.475e+08, 3.555e+08, 2.889e+08, 3.861e+08],
[6.840e+07, 5.760e+07, 4.320e+07, 0.000e+00, 3.465e+08],
[ 5.670e+07,  1.908e+08,  4.482e+08,  3.483e+08, -8.190e+07],
[5.670e+07, 1.071e+08, 1.170e+08, 5.940e+07, 2.619e+08],
[4.770e+07, 1.017e+08, 1.503e+08, 1.494e+08, 1.953e+08],
[8.820e+07, 2.736e+08, 4.536e+08, 5.427e+08, 3.753e+08],
[1.314e+08, 3.285e+08, 4.473e+08, 4.212e+08, 8.640e+08],
[6.300e+07, 1.818e+08, 2.367e+08, 3.384e+08, 3.312e+08]]

expectedV = [1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2]



#leave one out cross validation
def loocv(dataset,expectedValues,kernel,scale,low,high):
    
    X = np.array(dataset)
    y = np.array(expectedValues)
    clf = svm.SVC( kernel = kernel, gamma = "auto") #creating svm object
    results = []
    fails = 0

    if(scale == True):
        min_max_scaler = preprocessing.MinMaxScaler(feature_range =(low,high))
        X = min_max_scaler.fit_transform(X)
    
    for x in range(len(X)):
        A = np.delete(X,x,0)
        b = np.delete(y,x)
        clf.fit(A,b)
        prediction = clf.predict([X[x]])
        if(prediction[0]!=y[x]):
            fails+=1
        results.append(prediction[0])

    print("expected: " + str(expectedValues))
    print("outcome: " + str(results))
    print("number of misses " + str(fails))
    print("********************************************************************")
    print(X)
    print("********************************************************************")

    
high = 9
low = -9

print("cardboardPlastic")
loocv(cardboardPlastic,expectedV,"linear",True,low,high)

print("cardboardWood")
loocv(cardboardWood,expectedV,"linear",True,low,high)

print("woodPlastic")
loocv(woodPlastic,expectedV,"linear",True,low,high)






